package ua.nure.lytovchenko.task2.part2;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class ListImpl<E> implements List<E> {
    protected Node<E> head;
    protected Node<E> current;
    protected int length;


    @Override
    public void addFirst(E element) {
        if (head == null) {
            head = new Node(element);
        } else {
            Node tempNode = head;
            head = new Node(element);
            head.next = tempNode;
            tempNode.prev = head;
        }
        length++;
    }

    @Override
    public void addLast(E element) {
        if (head == null) {
            addFirst(element);
        } else {
            current = getLastNode();
            current.next = new Node(element);
            current.next.prev = current;
            length++;
        }
    }

    @Override
    public void removeFirst() {
        length--;
        if (head.next == null) {
            head = null;
            return;
        }
        head = head.next;
        head.prev = null;
    }

    @Override
    public void removeLast() {
        if (head.next == null) {
            head = null;
            return;
        }
        current = getLastNode().prev;
        current.next = null;
        length--;
    }

    @Override
    public E getFirst() {
        return head.data;
    }

    @Override
    public E getLast() {
        return getLastNode().data;
    }

    @Override
    public Object search(Object element) {
        current = head;
        if (element == null) {
            return null;
        }
        while (current != null) {
            if (current.data.equals(element.toString())) {
                return current;
            }
            current = current.next;
        }
        return null;
    }

    @Override
    public boolean remove(Object element) {
        element = String.valueOf(element);
        current = head;
        if (head.data.equals(element)) {
            removeFirst();
            length--;
            return true;
        }
        while (current != null) {
            if (current.data.equals(element)) {
                if (current.next == null) {
                    removeLast();
                    return true;
                }
                current.prev.next = current.next;
                length--;
                return true;
            }
            current = current.next;
        }
        return false;
    }

    @Override
    public void clear() {
        head = null;
        length = 0;
    }

    @Override
    public int size() {
        return length;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        current = head;
        while (current != null) {
            sb.append(current.data.toString()).append(", ");
            current = current.next;
        }
        return (sb.length() != 1) ? (sb.toString().substring(0, sb.length() - 2) + "]") : "[]";
    }

    @Override
    public Iterator<E> iterator() {
        return new IteratorImpl();
    }

    public class IteratorImpl<T> implements Iterator<E> {
        private Node<E> currentNode;
        private boolean removed = true;

        @Override
        public boolean hasNext() {
            if (head != null && currentNode == null) {
                return true;
            } else {
                return currentNode.next != null;
            }
        }

        @Override
        public E next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            if (currentNode == null) {
                currentNode = head;
            } else {
                currentNode = currentNode.next;
            }
            removed = false;
            return currentNode.data;
        }

        @Override
        public void remove() {
            if (removed) {
                throw new IllegalStateException();
            }
            if (currentNode == head) {
                removeFirst();
            } else if (currentNode.next == null) {
                removeLast();
            } else {
                currentNode.prev = currentNode.next;
                length--;
            }
            removed = true;
        }
    }

    private Node<E> getLastNode(){
        current = head;
        while (current.next != null) {
            current = current.next;
        }
        return current;
    }

    protected static class Node<E> {

        private Node<E> next;
        private Node<E> prev;
        private E data;

        public Node() {

        }

        public Node(E data) {
            this.data = data;
        }

        public Node<E> getNext() {
            return next;
        }

        public Node<E> getPrev() {
            return prev;
        }

        public E getData() {
            return data;
        }

        @Override
        public String toString() {
            return String.valueOf(data);
        }


    }


}
